/*
    Copyright © 2023 <Pingzhou Ming>

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the “Software”), to deal in 
    the Software without restriction, including without limitation the rights to use, 
    copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, 
    and to permit persons to whom the Software is furnished to do so, subject to the 
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies 
    or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS 
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
    THE SOFTWARE.
*/

#ifndef NS_POINTER_H
#define NS_POINTER_H

#include "attribute.h"
#include "object.h"


namespace nsim2023
{


class PointerValue : public AttributeValue
{
  public:
    PointerValue();

    PointerValue(Ptr<Object> object);

    void SetObject(Ptr<Object> object);

    Ptr<Object> GetObject() const;

    template <typename T>
    PointerValue(const Ptr<T>& object);

    template <typename T>
    operator Ptr<T>() const;

    // Documentation generated by print-introspected-doxygen.cc
    template <typename T>
    void Set(const Ptr<T>& value);

    template <typename T>
    Ptr<T> Get() const;

    template <typename T>
    bool GetAccessor(Ptr<T>& value) const;

    Ptr<AttributeValue> Copy() const override;
    std::string SerializeToString(Ptr<const AttributeChecker> checker) const override;
    bool DeserializeFromString(std::string value, Ptr<const AttributeChecker> checker) override;

  private:
    Ptr<Object> m_value;
};

class PointerChecker : public AttributeChecker
{
  public:
    virtual TypeId GetPointeeTypeId() const = 0;
};

template <typename T>
Ptr<AttributeChecker> MakePointerChecker();

}

/***************************************************************
 *  Implementation of the templates declared above.
 ***************************************************************/
namespace nsim2023
{

namespace internal
{

/** PointerChecker implementation. */
template <typename T>
class PointerChecker : public nsim2023::PointerChecker
{
    bool Check(const AttributeValue& val) const override
    {
        const PointerValue* value = dynamic_cast<const PointerValue*>(&val);
        if (value == nullptr)
        {
            return false;
        }
        if (!value->GetObject())
        {
            return true;
        }
        T* ptr = dynamic_cast<T*>(PeekPointer(value->GetObject()));
        if (ptr == nullptr)
        {
            return false;
        }
        return true;
    }

    std::string GetValueTypeName() const override
    {
        return "nsim2023::PointerValue";
    }

    bool HasUnderlyingTypeInformation() const override
    {
        return true;
    }

    std::string GetUnderlyingTypeInformation() const override
    {
        TypeId tid = T::GetTypeId();
        return "nsim2023::Ptr< " + tid.GetName() + " >";
    }

    Ptr<AttributeValue> Create() const override
    {
        return nsim2023::Create<PointerValue>();
    }

    bool Copy(const AttributeValue& source, AttributeValue& destination) const override
    {
        const PointerValue* src = dynamic_cast<const PointerValue*>(&source);
        PointerValue* dst = dynamic_cast<PointerValue*>(&destination);
        if (src == nullptr || dst == nullptr)
        {
            return false;
        }
        *dst = *src;
        return true;
    }

    TypeId GetPointeeTypeId() const override
    {
        return T::GetTypeId();
    }
};

} // namespace internal

template <typename T>
PointerValue::PointerValue(const Ptr<T>& object)
{
    m_value = object;
}

template <typename T>
void
PointerValue::Set(const Ptr<T>& object)
{
    m_value = object;
}

template <typename T>
Ptr<T>
PointerValue::Get() const
{
    T* v = dynamic_cast<T*>(PeekPointer(m_value));
    return v;
}

template <typename T>
PointerValue::operator Ptr<T>() const
{
    return Get<T>();
}

template <typename T>
bool
PointerValue::GetAccessor(Ptr<T>& v) const
{
    Ptr<T> ptr = dynamic_cast<T*>(PeekPointer(m_value));
    if (!ptr)
    {
        return false;
    }
    v = ptr;
    return true;
}

ATTRIBUTE_ACCESSOR_DEFINE(Pointer);

template <typename T>
Ptr<AttributeChecker>
MakePointerChecker()
{
    return Create<internal::PointerChecker<T>>();
}

}

#endif /* NS_POINTER_H */

